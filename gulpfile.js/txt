const { src, dest,   task} = require('gulp');
const path = require('path');
const javascriptObfuscator = require('gulp-javascript-obfuscator');
const gulpSquoosh = require("gulp-squoosh");
const gulpUglify = require('gulp-uglify');
const concat = require('gulp-concat');
const csso = require('gulp-csso');
const fontmin = require('gulp-fontmin');
const clean = require('gulp-clean');
const sourcemaps = require('gulp-sourcemaps');
const SOURCE = './src/assets'
const DEST = './dist'
const BUILD = './build'


function deleteFonts() {
    return src(`${BUILD}/fonts/**/*.*`, {read: false})
        .pipe(clean({force: true}));
}

function miniFont () {
    return src(`${DEST}/fonts/**/*.*`)
        .pipe(fontmin({
            quiet: true,
        }))
        .pipe(dest(`${BUILD}/fonts`));
}

/**
function js() {
    return src()
        .pipe(concat('main.js'))
        .pipe(gulpUglify({
            mangle: {
                toplevel: true
            }
        }))
        .pipe(javascriptObfuscator())
        .pipe(gulpUglify())
        .pipe(dest(`${BUILD}/js`))
}
**/
function getResizeByDirectory(dir) {
    let tmp = path.dirname(dir).split('/');
    let size = tmp[tmp.length - 1];
    if(size != undefined)
    {
        tmp = size.split('x');
        if(Number.isInteger(parseInt(tmp[0])) && Number.isInteger(parseInt(tmp[1])))
        {
            return {
                resize: {
                    width: parseInt(tmp[0]),
                    height: parseInt(tmp[1])
                }
            }
        }
        else if(Number.isInteger(parseInt(size)))
        {
            return {
                resize: {
                    width: parseInt(size)
                }
            }
        }
    }
    return {};
}

function img() {
    return src(`${SOURCE}/img/**`)
        .pipe(gulpSquoosh(
            ({ width, height, size, filePath }) => ({
                preprocessOptions: (getResizeByDirectory(filePath)),
                encodeOptions: {
                    // jxl: {},
                    avif: {},
                    webp: {},
                    // wp2: {}
                    ...(path.extname(filePath) === ".png"
                        ? { oxipng: {} }
                        : { mozjpeg: {} }),
                },
            }))
        )
        .pipe(dest(`${BUILD}/img`));
}
/**
function build() {
    return parallel(js, css)//, img, series(deleteFonts, miniFont))
}

task(build);

build.description = 'optimise ALL files for production use';
build.exports = build;**/